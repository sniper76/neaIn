<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">


	<bean id="batchService" class="ony.cpes.internal.batch.service.impl.BatchServiceImpl"/>

	<!-- 테스트용 잡  -->
		<bean id="connJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		    <property name="targetObject" ref="batchService" />
		    <property name="targetMethod" value="getBatchConn" />
		    <property name="concurrent" value="false" />
		</bean>
		<!-- 테스트용  트리거-->
	
		<bean id="connJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		    <property name="jobDetail" ref="connJob" />
		    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
		    <property name="cronExpression" value="*/10 * * * * ?" />
		</bean>
	
		<!-- 테스트용 스케줄러 -->
		<bean id="connJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		    <property name="triggers">
		        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
		        <list><ref bean="connJobTrigger" /></list>
		    </property>
		    
		    <property name="quartzProperties">
	            <props>
	                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
	                <prop key="org.quartz.threadPool.threadCount">5</prop>
	                <prop key="org.quartz.threadPool.threadPriority">4</prop>
	                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
	                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
	            </props>
	        </property>
		</bean>
		
	<!-- OVER 3 DAYS FOR APPLIC -->
		<bean id="applicJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		    <property name="targetObject" ref="batchService" />
		    <property name="targetMethod" value="selectOverThreeDaysApplic" />
		    <property name="concurrent" value="false" />
		</bean>
		<!--  trigger-->
	
		<bean id="applicJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		    <property name="jobDetail" ref="applicJob" />
		    <property name="cronExpression" value="0 1 * * * ?" />
		</bean>
	
		<!-- scheduler -->
		<bean id="applicJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		    <property name="triggers">
		        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
		        <list><ref bean="applicJobTrigger" /></list>
		    </property>
		    
		    <property name="quartzProperties">
	            <props>
	                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
	                <prop key="org.quartz.threadPool.threadCount">5</prop>
	                <prop key="org.quartz.threadPool.threadPriority">4</prop>
	                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
	                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
	            </props>
	        </property>
		</bean>
	
	<!-- OVER 3 DAYS FOR offer -->
		<bean id="offerJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		    <property name="targetObject" ref="batchService" />
		    <property name="targetMethod" value="selectOverThreeDaysOffer" />
		    <property name="concurrent" value="false" />
		</bean>
		<!--  trigger-->
	
		<bean id="offerJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		    <property name="jobDetail" ref="offerJob" />
		    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
		    <property name="cronExpression" value="10 1 * * * ?" />
		</bean>
	
		<!-- scheduler -->
		<bean id="offerJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		    <property name="triggers">
		        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
		        <list><ref bean="offerJobTrigger" /></list>
		    </property>
		    
		    <property name="quartzProperties">
	            <props>
	                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
	                <prop key="org.quartz.threadPool.threadCount">5</prop>
	                <prop key="org.quartz.threadPool.threadPriority">4</prop>
	                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
	                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
	            </props>
	        </property>
		</bean>
		
	<!-- OVER 3 DAYS FOR offer -->
		<bean id="etcJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		    <property name="targetObject" ref="batchService" />
		    <property name="targetMethod" value="insertBatchPopulCompny" />
		    <property name="concurrent" value="false" />
		</bean>
		<!--  trigger-->
	
		<bean id="etcJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		    <property name="jobDetail" ref="etcJob" />
		    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
		    <property name="cronExpression" value="20 1 * * * ?" />
		</bean>
	
		<!-- scheduler -->
		<bean id="etcJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		    <property name="triggers">
		        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
		        <list><ref bean="etcJobTrigger" /></list>
		    </property>
		    
		    <property name="quartzProperties">
	            <props>
	                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
	                <prop key="org.quartz.threadPool.threadCount">5</prop>
	                <prop key="org.quartz.threadPool.threadPriority">4</prop>
	                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
	                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
	            </props>
	        </property>
		</bean>
		
		
</beans>
